openapi: 3.0.0
info:
  version: 1.0.0
  title: Node Api Starter
  description: A Node JS API Boilerplate with authentication and authorization Using Express JS, Postgres DB and Redis.

servers:
- url: http://localhost:3023
  description: Development Server

paths:
  /:
    get:
      tags:
        - Index Route
      summary: Returns the service name
      description: Optional description
      responses:
        200:
          description: Application Service name
          content:
            application/json:
              schema:
                title: Sample
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: string
                    example: Service
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
  /unknown:
    get:
      tags:
        - Invalid Route
      summary: Returns error for an invalid route
      description: When a route does not exist, this is the sample response
      responses:
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFound'
  /auth/login:
    post:
      tags:
        - Login Route
      summary: Login Route
      description: Generate Access token on successful login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Successful Login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUser'
        400:
          description: Failed Login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
  /auth/register:
    post:
      tags:
        - Registration Route
      summary: Registration Route
      description: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
                confirm_password:
                  type: string
                date_of_birth:
                  type: string
      responses:
        201:
          description: Successful Registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredUser'
        400:
          description: Failed Registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'


components:
  schemas:
    RequestError:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
    ResourceNotFound:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: Resource not found
    ServerError:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: Unknown Error
    LoggedInUser:
      type: object
      properties:
        status:
          type: boolean
          example: true
        data:
          type: object
          properties:
            access_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ
            user_details:
              type: object
              properties:
                id:
                  type: string
                  example: user-12345
                email:
                  type: string
                  example: example@gmail.com
                username:
                  type: string
                  example: example
    RegisteredUser:
      type: object
      properties:
        status:
          type: boolean
          example: true
        data:
          type: object
          properties:
            message:
              type: string
              example: Successfully registered user account
            user:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                username:
                  type: string
                  example: example

